/*
 * Payments API
 * The Payments API allows capturing payments from customers using a variety of payment methods. Charges can be created as one-off events, or payment information can be saved for later use. The API has support for all aspects of a transaction's lifecycle, from initial capture to cancellations and refunds. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: GCPayments@digitalriver.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.Source;
import java.util.ArrayList;
import java.util.List;

/**
 * SourceList
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-10-19T17:19:19.800Z")
public class SourceList   {
  @JsonProperty("offset")
  private Integer offset = null;

  @JsonProperty("limit")
  private Integer limit = null;

  @JsonProperty("data")
  private List<Source> data = new ArrayList<Source>();

  public SourceList offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * The current offset of the first elemetn in the data array from the start of the collection.
   * @return offset
  **/
  @ApiModelProperty(value = "The current offset of the first elemetn in the data array from the start of the collection.")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public SourceList limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * The maximum number of source records in the response.
   * @return limit
  **/
  @ApiModelProperty(value = "The maximum number of source records in the response.")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public SourceList data(List<Source> data) {
    this.data = data;
    return this;
  }

  public SourceList addDataItem(Source dataItem) {
    this.data.add(dataItem);
    return this;
  }

   /**
   * An array of source records.
   * @return data
  **/
  @ApiModelProperty(value = "An array of source records.")
  public List<Source> getData() {
    return data;
  }

  public void setData(List<Source> data) {
    this.data = data;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceList sourceList = (SourceList) o;
    return Objects.equals(this.offset, sourceList.offset) &&
        Objects.equals(this.limit, sourceList.limit) &&
        Objects.equals(this.data, sourceList.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offset, limit, data);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceList {\n");
    
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

