/*
 * Payments API
 * The Payments API allows capturing payments from customers using a variety of payment methods. Charges can be created as one-off events, or payment information can be saved for later use. The API has support for all aspects of a transaction's lifecycle, from initial capture to cancellations and refunds. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: GCPayments@digitalriver.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Source
 */
@javax.annotation.Generated(value = "class io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-10-18T15:01:04.059Z")
public class Source   {
  @JsonProperty("id")
  private String id = null;

  @JsonProperty("type")
  private String type = null;

  @JsonProperty("usage")
  private String usage = "single";

  @JsonProperty("status")
  private String status = null;

   /**
   * A unique identifier for this source.
   * @return id
  **/
  @ApiModelProperty(value = "A unique identifier for this source.")
  public String getId() {
    return id;
  }

  public Source type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The payment type of the source. The payment type will correspond to another element in the source response that contains detailed information specific to the type. For example, a type of `creditCard` indicates that there is an object in the response named `creditCard` that will contain card-specific data. Possible values are: * creditCard * wireTransfer 
   * @return type
  **/
  @ApiModelProperty(required = true, value = "The payment type of the source. The payment type will correspond to another element in the source response that contains detailed information specific to the type. For example, a type of `creditCard` indicates that there is an object in the response named `creditCard` that will contain card-specific data. Possible values are: * creditCard * wireTransfer ")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public Source usage(String usage) {
    this.usage = usage;
    return this;
  }

   /**
   * The usage type of the source. Depending on the value, the source can be used only once, or it can be reused multiple times. Possible values are: * single * multiple 
   * @return usage
  **/
  @ApiModelProperty(required = true, value = "The usage type of the source. Depending on the value, the source can be used only once, or it can be reused multiple times. Possible values are: * single * multiple ")
  public String getUsage() {
    return usage;
  }

  public void setUsage(String usage) {
    this.usage = usage;
  }

   /**
   * The current status of the source. Only a source with a `chargeable` status can be used to create a charge. Possible values are: * chargeable * pending * cancelled * failed 
   * @return status
  **/
  @ApiModelProperty(value = "The current status of the source. Only a source with a `chargeable` status can be used to create a charge. Possible values are: * chargeable * pending * cancelled * failed ")
  public String getStatus() {
    return status;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.id, source.id) &&
        Objects.equals(this.type, source.type) &&
        Objects.equals(this.usage, source.usage) &&
        Objects.equals(this.status, source.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, usage, status);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

